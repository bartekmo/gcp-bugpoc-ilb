resources:
- name: {{ properties.name }}
  type: compute.v1.instance
  properties:
    zone: {{ properties.zone }}
    region: {{ properties.zone.split('-')[0]}}-{{ properties.zone.split('-')[1]}}
    machineType: zones/{{ properties.zone }}/machineTypes/e2-standard-2
    disks:
    - deviceName: {{ properties.name }}-disk
      boot: true
      autoDelete: true
      diskSizeGb: 10
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/family/debian-9
    networkInterfaces:
    {% for net in properties.networks %}
    - network: {{ net.vpcLink }}
      subnetwork: {{ net.subnetLink }}
      {% if loop.index0==0 %}
      accessConfigs:
      - name: {{ properties.name }}-pip
        type: ONE_TO_ONE_NAT
      {% endif %}
    {% endfor %}
    canIpForward: Yes
    metadata:
      items:
      - key: startup-script
        value: |
          # Enable IP forwarding:
          echo 1 > /proc/sys/net/ipv4/ip_forward
          echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/20-iptables.conf
          # Read VM network configuration:
          md_vm="http://169.254.169.254/computeMetadata/v1/instance/"
          md_net="$md_vm/network-interfaces"
          nic0_gw="$(curl -H "Metadata-Flavor:Google" $md_net/0/gateway)"
          nic0_mask="$(curl -H "Metadata-Flavor:Google" $md_net/0/subnetmask)"
          nic1_gw="$(curl -H "Metadata-Flavor:Google" $md_net/1/gateway)"
          nic1_mask="$(curl -H "Metadata-Flavor:Google" $md_net/1/subnetmask)"
          nic1_addr="$(curl -H "Metadata-Flavor:Google" $md_net/1/ip)"
          # Source based policy routing for nic1
          echo "100 rt-nic1" >> /etc/iproute2/rt_tables
          ip rule add pri 32000 from $nic1_gw/$nic1_mask table rt-nic1
          sleep 1
          ip route add 35.191.0.0/16 via $nic1_gw dev eth1 table rt-nic1
          ip route add 130.211.0.0/22 via $nic1_gw dev eth1 table rt-nic1
          # Start iptables:
          iptables -t nat -F
          iptables -t nat -A POSTROUTING \
          -s $nic0_gw/$nic0_mask \
          -d $nic1_gw/$nic1_mask \
          -o eth1 \
          -j SNAT \
          --to-source $nic1_addr
          iptables -t nat -A POSTROUTING \
          -s $nic1_gw/$nic1_mask \
          -d $nic0_gw/$nic0_mask \
          -o eth0 \
          -j SNAT \
          --to-source $nic0_addr
          /sbin/iptables-save
          # Use a web server to pass the health check for this example.
          # You should use a more complete test in production.
          apt-get update
          apt-get install apache2 -y
          a2ensite default-ssl
          a2enmod ssl
          echo "Example web page to pass health check" | \
          tee /var/www/html/index.html
          systemctl restart apache2'
